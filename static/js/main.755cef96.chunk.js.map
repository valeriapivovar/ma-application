{"version":3,"sources":["components/ToDoItem.jsx","components/ToDoForm.jsx","helpers/TodoistApi.js","components/ToDo.jsx","index.jsx"],"names":["ToDoItem","props","item","onCheck","onRemove","toggleEdit","onEdit","input","React","createRef","toggleEditItem","e","preventDefault","id","onCheckItem","triggerStyle","checked","textDecoration","textAlign","edited","className","style","backgroundColor","onChange","placeholder","defaultValue","content","ref","onClick","current","state","value","danger","trigger","description","Date","created","format","ToDoForm","addToast","useToasts","onSubmit","Form","useForm","form","layout","onFinish","values","title","titleString","String","descriptionString","length","ch","isNaN","toUpperCase","toLowerCase","appearance","resetFields","Item","name","htmlType","type","TodoistApi","init","headers","Authorization","apiToken","uuidv4","client","axios","baseURL","apiUrl","getTasksList","get","closeTask","taskId","post","updateTasks","data","this","ToDo","useState","list","todos","setTodos","idCount","setIdCount","Todos","useEffect","index","findIndex","todo","splice","removeAllCheckedItems","filter","forEach","map","renderTodoItems","Header","Layout","Footer","Content","App","then","response","mappedList","setState","span","offset","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.755cef96.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button, Checkbox, Input} from 'antd';\r\nimport Collapsible from 'react-collapsible';\r\nimport {IoTrashBin, IoPencil, IoClose, IoCheckmark} from \"react-icons/io5\"\r\nimport Time from 'react-time-format'\r\n\r\nexport const ToDoItem = (props) => {\r\n    const {item, onCheck, onRemove, toggleEdit, onEdit} = props;\r\n    let input = React.createRef();\r\n\r\n    const onRemoveItem = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (onRemove) {\r\n            onRemove(item.id);\r\n        }\r\n    }\r\n\r\n    const toggleEditItem = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (toggleEdit) {\r\n            toggleEdit(item.id);\r\n        }\r\n    }\r\n\r\n    const onEditItem = (e) => {\r\n        e.preventDefault();\r\n        if (onEdit) {\r\n            onEdit(item.id, input.current.state.value);\r\n        }\r\n    }\r\n\r\n    const onCheckItem = () => {\r\n        if (onCheck) {\r\n            onCheck(item.id);\r\n        }\r\n    }\r\n\r\n    let triggerStyle = {};\r\n\r\n    if (item.checked) {\r\n        triggerStyle = {\r\n            textDecoration: 'line-through',\r\n            textAlign: 'left'\r\n        }\r\n    }\r\n\r\n    if (item.edited) {\r\n        return (\r\n            <li className=\"todo-item\" key={item.id} style={{backgroundColor: item.checked ? '#B0E0E6' : '#fff'}}>\r\n                <Checkbox className=\"checkBox\" checked={item.checked} onChange={onCheckItem}></Checkbox>\r\n                <div className=\"inline-editor\">\r\n                    <Input placeholder={'New name'} defaultValue={item.content} ref={input}/>\r\n                </div>\r\n                <div className=\"controls\">\r\n                    <Button onClick={onEditItem}>\r\n                        <IoCheckmark/>\r\n                    </Button>\r\n                    <Button danger onClick={toggleEditItem}>\r\n                        <IoClose/>\r\n                    </Button>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <li className=\"todo-item\" key={item.id} style={{backgroundColor: item.checked ? '#B0E0E6' : '#fff'}}>\r\n            <Checkbox className=\"checkBox\" checked={item.checked} onChange={onCheckItem}></Checkbox>\r\n            <Collapsible trigger={item.content} triggerStyle={triggerStyle}>\r\n                <div>\r\n                    <div>\r\n                        <span className=\"lineHeader\">Description:</span> {item.description}\r\n                    </div>\r\n                    <div>\r\n                        <span className=\"lineHeader\">Created At:</span> <Time className=\"created\" value={new Date(item.created)} format=\"DD.MM.YYYY â€“ hh:mm\"/>\r\n                    </div>\r\n                </div>\r\n            </Collapsible>\r\n            <div className=\"controls\">\r\n                <Button onClick={toggleEditItem}>\r\n                    <IoPencil/>\r\n                </Button>\r\n                <Button danger onClick={onRemoveItem}>\r\n                    <IoTrashBin/>\r\n                </Button>\r\n            </div>\r\n        </li>\r\n    )\r\n}","import React from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\n\r\nfunction checkCase(ch) {\r\n  if (!isNaN(ch * 1)){\r\n     return false;\r\n  }\r\n   else {\r\n     if (ch === ch.toUpperCase()) {\r\n        return true;\r\n     }\r\n     if (ch === ch.toLowerCase()){\r\n        return false;\r\n     }\r\n  }\r\n}\r\n\r\n\r\nexport const ToDoForm = (props) => {\r\n  const { addToast } = useToasts();\r\n  const { onSubmit } = props;\r\n  const [form] = Form.useForm();\r\n  const onFinish = (values) => {\r\n    if (onSubmit) {\r\n      if(values.title)\r\n      {\r\n        var titleString = String(values.title);\r\n        var descriptionString = String(values.description);\r\n\r\n        if(titleString.length>3)\r\n      {\r\n        if(checkCase(descriptionString[0])){\r\n        onSubmit(values.title, values.description);\r\n      }\r\n      else {\r\n        addToast('Description should has first capital letter', { appearance: 'error' });\r\n      }\r\n    }\r\n      else\r\n      {\r\n        addToast('Title should has Length > 3', { appearance: 'error' });\r\n      }\r\n      }\r\n    }\r\n    form.resetFields();\r\n  }\r\n\r\n  return (\r\n    <Form className=\"todo-form\" form={form} layout={'inline'} onFinish={onFinish}>\r\n      <Form.Item name=\"title\" className=\"todo-form-input\">\r\n        <Input placeholder={'New task'} />\r\n      </Form.Item>\r\n      <Form.Item name=\"description\" className=\"todo-form-input\">\r\n        <Input placeholder={'Description'} />\r\n      </Form.Item>\r\n      <Form.Item className=\"todo-form-actions\">\r\n        <Button htmlType=\"submit\" type=\"primary\">Add</Button>\r\n      </Form.Item>\r\n    </Form>\r\n  )\r\n}\r\n","import * as axios from \"axios\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default class TodoistApi {\r\n    constructor() {\r\n        this.apiToken = \"b3c567db62e0a4b868b7af263cb8115200673206\";\r\n        this.apiUrl = \"https://api.todoist.com/rest/v1/tasks\";\r\n    }\r\n\r\n    init = () => {\r\n        let headers = {\r\n            Authorization: `Bearer ${this.apiToken}`,\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-Request-Id\": uuidv4()\r\n        };\r\n\r\n        this.client = axios.create({\r\n            baseURL: this.apiUrl,\r\n            headers: headers\r\n        });\r\n\r\n        return this.client;\r\n    };\r\n\r\n    getTasksList = () => {\r\n        return this.init().get(\"/\");\r\n    };\r\n\r\n    closeTask = (taskId) => {\r\n        return this.init().post(`/${taskId}/close`);\r\n    };\r\n\r\n    updateTasks = (taskId, content) => {\r\n        const data = {\r\n            content: content\r\n        }\r\n        return this.init().post(`/${taskId}`, data);\r\n    };\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Card, Divider, Button } from 'antd';\r\nimport { ToDoItem } from './ToDoItem';\r\nimport { ToDoForm } from './ToDoForm';\r\nimport TodoistApi from '../helpers/TodoistApi';\r\n\r\nexport const ToDo = (props) => {\r\n  const [todos, setTodos] = useState(props.list);\r\n  const [idCount, setIdCount] = useState(10);\r\n\r\n  const Todos = new TodoistApi();\r\n\r\n  useEffect(() => {\r\n    setTodos(props.list);\r\n  }, [props.list]);\r\n\r\n  const renderTodoItems = (todos) => {\r\n    return (\r\n      <ul className=\"todo-list\">\r\n        <div className=\"control-row\">\r\n          Amount of unchecked tasks: {(todos.filter(todo => todo.checked ===false)).length}\r\n          <Button onClick = {removeAllCheckedItems} type=\"primary\">Delete selected</Button>\r\n        </div>\r\n        {\r\n          todos.map(todo => <ToDoItem\r\n            key={todo.id}\r\n            item={todo}\r\n            description = {todo.description}\r\n            onRemove={onRemove}\r\n            onCheck={onCheck}\r\n            onEdit={onEdit}\r\n            toggleEdit={toggleEdit}\r\n          />)\r\n        }\r\n      </ul>\r\n    )\r\n  }\r\n\r\n\r\n  const onRemove = (id) => {\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n\r\n    Todos.closeTask(todos[index].id);\r\n\r\n    if (index !== -1) {\r\n      todos.splice(index, 1);\r\n      setTodos([...todos]);\r\n    }\r\n  }\r\n\r\n  const removeAllCheckedItems = () => {\r\n    const itemsToDelete = todos.filter(item => item.checked);\r\n\r\n    itemsToDelete.forEach(item => {\r\n      Todos.closeTask(item.id);\r\n    })\r\n    setTodos(todos.filter(item => !item.checked));\r\n  }\r\n\r\n  const onCheck = (id) => {\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n    \r\n    if (index !== -1) {\r\n      const todo = todos[index];\r\n\r\n      todo.checked = !todo.checked;\r\n      todos.splice(index, 1, todo);\r\n\r\n      setTodos([...todos]);\r\n    }\r\n    \r\n  }\r\n\r\n  const toggleEdit = (id) => {\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n\r\n    if (index !== -1) {\r\n      const todo = todos[index];\r\n\r\n      todo.edited = !todo.edited;\r\n\r\n      setTodos([...todos]);\r\n    }\r\n  }\r\n\r\n  const onEdit = (id, name) => {\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n\r\n    if (index !== -1) {\r\n      const todo = todos[index];\r\n\r\n      todo.edited = !todo.edited;\r\n      todo.content = name;\r\n\r\n      Todos.updateTasks(todo.id, todo.content);\r\n\r\n      setTodos([...todos]);\r\n    }\r\n  }\r\n\r\n  const onSubmit = (title, description) => {\r\n    const todo = {\r\n      id: idCount,\r\n      title,\r\n      description,\r\n      checked: false\r\n    };\r\n\r\n    setTodos([...todos, todo]);\r\n    setIdCount(idCount + 1);\r\n  }\r\n\r\n  return (\r\n    <Card title={'My todos'} className=\"todo-card\">\r\n      <ToDoForm onSubmit={onSubmit} />\r\n      <Divider />\r\n      {\r\n        renderTodoItems(todos)\r\n      }\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Layout, Row, Col} from 'antd';\r\n\r\nimport {ToDo} from './components/ToDo';\r\nimport TodoistApi from './helpers/TodoistApi';\r\n\r\nimport './style.css';\r\nimport 'antd/dist/antd.css'\r\nimport {ToastProvider} from 'react-toast-notifications';\r\n\r\nconst {Header, Footer, Content} = Layout;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const Todos = new TodoistApi();\r\n        this.state = {\r\n            list: []\r\n        }\r\n        Todos.getTasksList().then((response) => {\r\n            const mappedList = response.data.map(item => {\r\n                item.checked = false;\r\n                item.edited = false;\r\n                return item;\r\n            });\r\n            this.setState({\r\n                list: mappedList\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Header></Header>\r\n                <Content>\r\n                    <ToastProvider>\r\n                        <Row>\r\n                            <Col span={12} offset={6} className=\"todo\">\r\n                                <ToDo list={this.state.list}/>\r\n                            </Col>\r\n                        </Row>\r\n                    </ToastProvider>\r\n                </Content>\r\n                <Footer></Footer>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}